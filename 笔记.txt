### 第一课、
1.强类型、静态类型语言
  强类型-限制类型
  静态类型-编译期固定类型，运行时不可变

2.类型推测(var)
  i.并不是没有类型-使用方便
  ii.固定类型
  iii.不给类型默认dynamic类型

*3.dynamic 动态类型(接近js中的var、java中的object)

---------------------------------------------

### 第二课、
变量
1.类型
int, double(无float)
String
List (类似数组,dart叫列表)
Map
...

2.其他声明方式

final 仅保护赋值
  编译期-赋值
```
  final a = [1,2,3,5];
  a.add(1);
  print(a);
OUT:
  [1, 2, 3, 5, 1]
```

const 保护赋值和内容
  编译期-赋值
  运行时
```
  const a = [1,2,3,5];
  a.add(1);
  print(a);
OUT:
  Cannot add to an unmodifiable list
```

---------------------------------------------

1. 类型
   int a
   double b

2. var
   var a=12;
   var a; = dynamic a;

3.只读
  final 赋值
  const 赋值+内容

---------------------------------------------


dynamic 存在的类型
var     不存在的类型(编译完会替换为int double dynamic...)

---------------------------------------------

var 依赖推测            方便和把类型直接写出来一样
dynamic 接收任何东西(可以理解为杂务处)
  默认类型:
```
void show(a, b) {
  print('a');
}
void main() {
  show(12, 'aaa');

}
```

明确写死
int a;
var
var a = 12; => int a =12;

常量:
final 仅保护赋值
  只在编译期检查类型
const 保护赋值、保护内部修改
  编译期、运行时

dynamic VS var
var 并无此种类型(类型推测)
dynamic 属于一种类型

--------------------------------
var放心用
dynamic谨慎使用(相当于禁用了编译器的自动语法检查)

--------------------------------

### 第三课
函数
1.返回值类型
2.名字
3.参数列表

--------------------------------

dart函数 不支持重载的:

通过is间接判断,来实现重载

变量/值 is 类型

is 工作在运行时; is用于判断运行时类型



```
void show(dynamic a) {
  if( a is int) {
    print('a');
  } else if(a is String) {
    print('b');
  }else{
    throw TypeError();
  }
}
```

--------------------------------

参数列表:
1.可选参数
  xxx(a,[b,c]){...} 方括号即可

  变量,参数不传 默认值都是null

  可选参数必须在最后位置

  默认值: xxx(x a, [x b=...])

```
void show(int a, [int b, int c]) {
  print(a);
  print(b);
  print(c);
}
void main() {
  show(12);
}

OUT:
12
null
null
```

2.具名参数(有名字的参数,类似python的keyword参数)
  xxx(int a, int b, {int v1=xxx, xxx v2})

'''
void show(int a, {String name, int age}) {
  print(a);
  print(name);
  print(age);
}
void main() {
  show(12, age:24, name:'aq');
}

'''

--------------------------------
### 第四课

1.lambda
  (a,b,c) {
    return result;
  }

  (a,b,c)=>result

2.类型声明
  var可以用
  dynamic尽量不要用

  typedef numb=int Function(int, int);
  void Function(int, String) fn;

  typedef xxx = void Fuction(int ,String)7;
  xxx fn;



--------------------------------
### 第五课
数据类型:
数字

int     64位有符号整型
  63+1(符号位)

  BigInt (无上限,但性能低,软件模拟)

```
void main() {
  var a= pow(2, 63)-1;
  print(a);
}
OUT:
9223372036854775807
```



double 64位双精度浮点数(小数点浮动的意思)
  <=10^308

--------------------------------
1.try
字符串转数字
num.parse 转整数和小数
int.parse
```
try{
  var a = int.parse('12.1');
  print('ok');
}catch(e){
  print('no');
}

OUT:
no
```
double.parse


2. tryparse
  只能用于数字,普遍用try即可

--------------------------------

基本类型: int, double
扩展类型: BigInt, decimal...

解析数字
num.parse
int.parse
double.parse
tryParse

--------------------------------



### 第六课
类型转换
1.类提供的方法 如:a.toString() a.toDouble()  ...

2.转换对象的类型 as(运行时类型,不建议使用)
  o as 类型
  没有完成任何操作,只是让编译期把'o'当做'类型'
    运行时真正的检查--真垃圾

```
void main() {
  var arr=[1,2,3];
  Object o=arr;
  print((o as List)[0]);
}
```


--------------------------------




### 第七课
字符串
1.字符串写法 六种写法
  'xxx'

  "xxx"

  '''aaa
  b
  bbb'''

  """
  a
  b
  c"""


2.字符串模版  $a

```
  var a=12;
  //var str='a='+a.toString();
  var str="a=$a";
  print(str);

OUT:
  a=12

消除歧义
void main() {
  var a=12,b=1,ab=99;
  //var str='a='+a.toString();
  var str='a=${a}b=$b';
  print(str);
}

OUT:
a=12b=1
```


3.字符串对象
  length        有几个字(不分单字节还是多字节)
  codeUnits     dart采用utf-16

  str.toUpperCase()
  str.toLowerCase()

  trim()去掉前后空格

  replaceAll(待替换,替换目标内容)

  substring()


--------------------------------



### 第八课
list--数组
  定长+变长
  定长:C
  变长:js
  定长+变长:java

1.初始化
  List(length)
  List()

  a=[1,2,3,4]
  等价于
  var a=List(4);
  a[0]=1;
  a[1]=2;
  a[2]=3;
  a[3]=4;

2.定长
  a=List(n);
  a=[1,2,3];
  List() => List(0)

3.变长
  a.add(element);
  a.addAll([...]);


--------------------------------
List成员
  length
  [..]

  add(el)
  addAll([...])

  contains(el) => bool
  indexOf(el) => int

  sublist(start,[end]) 不包括结束位置

  insert(index, el)
  insertAll(index, [...])

  remove()
  removeAt()

  forEach((el){
  })

  map() => list x
        => Iterable

  Iterable.toList()

--------------------------------
### 第九课
泛型-- 一套代码适用不同的数据类型
  不是没有类型,类型可以作为一个特殊参数传进去

问题:让一个函数适用多种类型
1. dynamic      严重降低程序质量(问题推到运行时)
2. 写多套        麻烦
  showInt
  showString
  showPerson
  showWidget
  ...
3. 泛型       方便使用(重点)
  例子:
  List<x>
  List<dynamic> => var a=List<int>();
```
void show<T>(T a, T b) {
  print(a);
}
void main() {
  show(12, 'adf');
}
```

```
class Storage<T> {
  T val;
  get() {
    return val;
  }
  set(T newVal) {
    val=newVal;
  }
}
void main() {
  var s1=Storage<int>();
  s1.set(12);
  print(s1.get());
}
```


--------------------------------

### 第十课
Map
  默认类型: dynamic
  var m=Map();
  var m=Map<dynamic, dynamic>();

  Map里一任何东西都可以做key

1.
第一种写法:
```
void main() {
  var m=Map<String, int>();
  m['a']=97;
  print(m);
}
```
第二种写法:
```
void main() {
  var m=<String, int>{
    'a':12,
    'b':2
  };
  print(m);
}
```

m.addAll({...})
m.containsKey(key) => bool
m.containsValue(value) => bool

m.remove(key)

m.removeWhere( (key, value) => true是否删除 );

m.forEach((key, value){})

var m2=m.map((key, value) => MapEntry(key, value));

--------------------------------

### 第十一课

判断

if(必须用bool值)

switch(val) {
  case 值1:
   ...
    break;
  default:
    break;
}
--------------------------------

循环
for
  for
  for...in

while
do{...}while()

--------------------------------
异常捕获
try{
  可能产生运行时错误的代码
}on RangeError{
  ...
}catch(e){
  出错
}[finally{
  无论如何都执行,回收资源
}]



--------------------------------
### 第十二课
面向对象
C,JS 面向过程+面向对象
JAVA 面向对象

dart很依赖面向对象

程序=数据(变量)+操作(函数)
对象=属性(数据)+方法(函数)+访问器(getter, setter)+构造器(constructor)

--------------------------------

dart里面new
1.x 强制new
2.x 可选new

--------------------------------
child: Center(
  child: Text('sss');
)
===>
child: new Center(
  child: new Text('sss');
)


--------------------------------
dart里面new可选--任何情况下,都可以不写
dart里面this可选--没有冲突可选,有冲突加上
  成员变量 vs 普通变量
  this.name

--------------------------------
### 第十三课
成员

1.成员变量--属性
2.成员函数--方法
3.构造器
4.访问器
--------------------------------
var a;
int a;
final a;
const a;

--------------------------------
dart的class中没有访问修饰符
public
private
protected

习惯于_开头表示私有成员 -- 绝对不要用

--------------------------------

构造器--构建类的实例的时候会自动执行,可以完成初始化操作

跟类同名函数,没有返回值

```
class Person{
  String name='shi';
  int age;

  Person(String name, int age) {
    this.name=name;
    this.age=age;
  }

  void show() {
    print('xinming: $name, nianlin: $age');
  }
}
void main() {
  var p=Person('shi', 25);
  var p2=Person('aq', 24);
  p.show();
  p2.show();
}
```
第二种写法this
```
  String name;
  int age;
  Person(this.name, this.age);
```

简写
class xxx{
  type a;
  type b;
  xxx(this.a, this.b);
}

也可用keyword参数编写 -- 重要
class Person{
  String name;
  int age;
  Person({this.name, this.age});
}
--------------------------------

访问器







--------------------------------
### 第十四课
静态成员   无需实例化直接在类上访问; 所有实例共享一个数据
  实例成员 Person().a
  类成员   Person.a

static


--------------------------------
为什么final可选static
const必选static


--------------------------------
final 禁止赋值
const 禁止一切修改(包括赋值)


--------------------------------
final a=[1,2,3]; //每个实例的a可能不同(可以修改a里面的)

const a=[1,2,3]; //每个实例的a一定相同(a里面的不可修改)


const成员,没有必要存多份



--------------------------------
### 第十五课
继承: 从已有类(父类,基类,超类)上继承出一个新的类(子类,派生类)

1.怎么写
  class Base{

  }

  class Derived extends Base{

  }



2.有什么用
  i.重用已有代码
  ii.父类变了,子类不需要任何修改(理想情况下)直接享受父类的变化
    --降低维护成本
    bug修改父类子类同修正
    行为(如加个验证码)
  iii.层级关系 大型的框架中,层级关系可以帮很大的忙

class Widget{

}

class Text extends Widget{

}




--------------------------------

重载:
1.函数重载--dart不支持
  show(int a) { }
  show(String a) { }

2.父类重载--重写父类的方法(子类觉得父类提供的不够用)




override 重载
重载的子类方法,父类+自己的操作
1.直接复制父类的代码--极其不靠谱
  维护成本
  有时候压根复制不了--父类有时候根本就不是dart类

2.在重载的子类方法中,直接调用父类方法
  super.xxx();

--------------------------------

annotation (翻译为 标注,注解)

@xxxx

1.对代码的编译,程序执行来说本身毫无用处

2.有用--给IDE看,一定要加






--------------------------------

重载构造器

constructor(父类参数, 子类参数...): super(父类参数) {
  //子类构造工作

}
```
class Base{
  int a;
  Base(this.a);
}

class Derived extends Base{
  int b;
  Derived(int a, this.b):super(a);
}
```

--------------------------------
### 第十六课
抽象类: 不能被实例化, 无需提供方法的实现
侧重于描述"形状"有哪些通用操作,拿来继承

设计能力

abstract class 形状{

}

class Widget{

}




--------------------------------
### 第十七课
泛型: 不是没有类型,类型以参数形式传进来
泛型 vs dynamic

--------------------------------
泛型函数
泛型类
--------------------------------
泛型+继承
class Base<T>{}

class Derived<T> extends Base<T> { }
class Derived extends Base<int>　{ }

--------------------------------

泛型--范围

void hide<T>(T obj) {
  obj.show=false;
}






--------------------------------









--------------------------------







--------------------------------










--------------------------------