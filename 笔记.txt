### 第一课、
1.强类型、静态类型语言
  强类型-限制类型
  静态类型-编译期固定类型，运行时不可变

2.类型推测(var)
  i.并不是没有类型-使用方便
  ii.固定类型
  iii.不给类型默认dynamic类型

*3.dynamic 动态类型(接近js中的var、java中的object)

---------------------------------------------

### 第二课、
变量
1.类型
int, double(无float)
String
List (类似数组,dart叫列表)
Map
...

2.其他声明方式

final 仅保护赋值
  编译期-赋值
```
  final a = [1,2,3,5];
  a.add(1);
  print(a);
OUT:
  [1, 2, 3, 5, 1]
```

const 保护赋值和内容
  编译期-赋值
  运行时
```
  const a = [1,2,3,5];
  a.add(1);
  print(a);
OUT:
  Cannot add to an unmodifiable list
```

---------------------------------------------

1. 类型
   int a
   double b

2. var
   var a=12;
   var a; = dynamic a;

3.只读
  final 赋值
  const 赋值+内容

---------------------------------------------


dynamic 存在的类型
var     不存在的类型(编译完会替换为int double dynamic...)

---------------------------------------------

var 依赖推测            方便和把类型直接写出来一样
dynamic 接收任何东西(可以理解为杂务处)
  默认类型:
```
void show(a, b) {
  print('a');
}
void main() {
  show(12, 'aaa');

}
```

明确写死
int a;
var
var a = 12; => int a =12;

常量:
final 仅保护赋值
  只在编译期检查类型
const 保护赋值、保护内部修改
  编译期、运行时

dynamic VS var
var 并无此种类型(类型推测)
dynamic 属于一种类型

--------------------------------
var放心用
dynamic谨慎使用(相当于禁用了编译器的自动语法检查)

--------------------------------

### 第三课
函数
1.返回值类型
2.名字
3.参数列表

--------------------------------

dart函数 不支持重载的:

通过is间接判断,来实现重载

变量/值 is 类型

is 工作在运行时; is用于判断运行时类型



```
void show(dynamic a) {
  if( a is int) {
    print('a');
  } else if(a is String) {
    print('b');
  }else{
    throw TypeError();
  }
}
```

--------------------------------

参数列表:
1.可选参数
  xxx(a,[b,c]){...} 方括号即可

  变量,参数不传 默认值都是null

  可选参数必须在最后位置

  默认值: xxx(x a, [x b=...])

```
void show(int a, [int b, int c]) {
  print(a);
  print(b);
  print(c);
}
void main() {
  show(12);
}

OUT:
12
null
null
```

2.具名参数(有名字的参数,类似python的keyword参数)
  xxx(int a, int b, {int v1=xxx, xxx v2})

'''
void show(int a, {String name, int age}) {
  print(a);
  print(name);
  print(age);
}
void main() {
  show(12, age:24, name:'aq');
}

'''



















